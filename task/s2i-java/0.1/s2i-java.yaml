apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-java
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.19"
    tekton.dev/tags: s2i, java, workspace
    tekton.dev/displayName: "s2i java"
spec:
  description: >-
    s2i-java task clones a Git repository and builds and
    pushes a container image using S2I and a Java builder image.
  # results:
  #   - name: IMAGE_DIGEST
  #     description: Digest of the image just built.
  params:
    - name: JAVA_IMAGESTREAM_URL
      description: The tag of java imagestream for java version
      default: 'image-registry.openshift-image-registry.svc:5000/openshift/openjdk-17:latest'
      type: string
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
    - name: MAVEN_ARGS_APPEND
      description: Additional Maven arguments
      default: ""
      type: string
    - name: S2I_SOURCE_DEPLOYMENTS_FILTER
      description: https://docs.openshift.com/online/pro/using_images/s2i_images/java.html
      default: "*.war"
      type: string
    - name: S2I_SOURCE_CONFIGURATION_DIR
      description: https://docs.openshift.com/online/pro/using_images/s2i_images/java.html
      default: "src/main/liberty"
      type: string
    - name: S2I_TARGET_CONFIGURATION_DIR
      description: https://docs.openshift.com/online/pro/using_images/s2i_images/java.html
      default: "/deployments"
      type: string
    - name: MAVEN_CLEAR_REPO
      description: Remove the Maven repository after the artifact is built
      default: "false"
      type: string
    - name: MAVEN_MIRROR_URL
      description: The base URL of a mirror used for retrieving artifacts
      default: ""
      type: string
    - name: BUILDER_IMAGE
      description: The location of the buildah builder image.
      default: quay.io/buildah/stable:v1.22.0
  resources:
    outputs:
      - name: intermediate-image
        type: image
  workspaces:
    - name: source
      mountPath: /workspace/source
    - name: intermediate-docker-image-pvc
      mountPath: /var/lib/containers
  steps:
    - name: gen-env-file
      image: quay.io/openshift-pipeline/s2i
      workingdir: /env-params
      command:
        - '/bin/sh'
        - '-c'
      args:
        - |-
          echo "MAVEN_CLEAR_REPO=$(params.MAVEN_CLEAR_REPO)" > env-file

          # https://docs.openshift.com/online/pro/using_images/s2i_images/java.html
          # https://robertopozzi.medium.com/implement-your-ci-cd-process-with-red-hat-openshift-pipelines-3936cbea7bf4
          echo "S2I_TARGET_DEPLOYMENTS_DIR=/deployments" >> env-file
          echo "S2I_SOURCE_DEPLOYMENTS_FILTER=$(params.S2I_SOURCE_DEPLOYMENTS_FILTER)" >> env-file
          echo "S2I_SOURCE_CONFIGURATION_DIR=$(params.S2I_SOURCE_CONFIGURATION_DIR)" >> env-file
          echo "S2I_TARGET_CONFIGURATION_DIR=$(params.S2I_TARGET_CONFIGURATION_DIR)" >> env-file

          [[ '$(params.MAVEN_ARGS_APPEND)' != "" ]] &&
            echo "MAVEN_ARGS_APPEND=$(params.MAVEN_ARGS_APPEND)" >> env-file

          [[ '$(params.MAVEN_MIRROR_URL)' != "" ]] &&
            echo "MAVEN_MIRROR_URL=$(params.MAVEN_MIRROR_URL)" >> env-file

          echo "Generated Env file"
          echo "------------------------------"
          cat env-file
          echo "------------------------------"
      volumeMounts:
        - name: envparams
          mountPath: /env-params
    - name: generate
      image: quay.io/openshift-pipeline/s2i
      workingdir: $(workspaces.source.path)
      command:
        - 's2i'
        - 'build'
        - '$(params.PATH_CONTEXT)'
        - '$(params.JAVA_IMAGESTREAM_URL)'
        - '--image-scripts-url'
        - 'image:///usr/local/s2i'
        - '--as-dockerfile'
        - '/gen-source/Dockerfile.gen'
        - '--environment-file'
        - '/env-params/env-file'
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
        - name: envparams
          mountPath: /env-params
    - name: build
      image: $(params.BUILDER_IMAGE)
      workingdir: /gen-source
      command: ['buildah', 'bud', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(resources.outputs.intermediate-image.url)', '.']
      securityContext:
        privileged: true
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
    - name: view-images
      command:
        - buildah
        - images
        - '--storage-driver=vfs'
      image: $(params.BUILDER_IMAGE)
      resources: {}
      securityContext:
        privileged: true
    # - name: digest-to-results
    #   image: $(params.BUILDER_IMAGE)
    #   script: cat $(workspaces.source.path)/image-digest | tee /tekton/results/IMAGE_DIGEST
  volumes:
    - name: gen-source
      emptyDir: {}
    - name: envparams
      emptyDir: {}